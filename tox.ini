[tox]
envlist =
    pkgvalidate
    docslint
    docsbuild
    mdlint
    ymllint
    shellcheck
    dockerfilelint
    dockerbuildtest
    codesec
    codelint
    blackbeta
    typing
    py37
    civalidate
allow_failures = blackbeta

[testenv]
basepython = python3.7
skip_install = true
skipsdist=True
deps =
    py37: -r{toxinidir}/requirements.txt
    {codelint,typing,py37}: -r{toxinidir}/requirements_test.txt
    {docslint,docsbuild}: -r{toxinidir}/requirements_docs.txt
    {codelint,typing,py37,docslint,docsbuild}: -c{toxinidir}/requirements_constraints.txt
    {pkgvalidate,mdlint,ymllint}: nodeenv==1.3.3

[testenv:pkgvalidate]
description = Validate the pacakge.json inside python venv based on npm specifications
commands =
    nodeenv --python-virtualenv
    npm install
    npm run validate-pkg

[testenv:docslint]
description = Pass restructuredText files through doc8 linter
depends = pkgvalidate
commands = doc8 --config {toxinidir}/doc8.ini {toxinidir}/docs/source

[testenv:docsbuild]
changedir = docs
depends = docslint
commands =
    sphinx-build -W -b html -d {envtmpdir}/doctrees source {envtmpdir}/html

[testenv:mdlint]
description = Run remark with remark-lint plugins inside python venv against md files
commands =
    nodeenv --python-virtualenv
    npm install
    npm run lint-md

[testenv:ymllint]
description = Use nodeenv to run prettier inside python venv against yml files
commands =
    nodeenv --python-virtualenv
    npm install
    npm run lint-yml

[testenv:shellcheck]
description = Run shellcheck (if exists) for linting shell scripts
commands = /bin/bash {toxinidir}/shellscripts/run-once-docker-operations.sh check-shellscripts

[testenv:dockerfilelint]
description = Run local only dockerfilelint linter
depends =
    mdlint
    ymllint
    shellcheck
commands = /bin/bash {toxinidir}/shellscripts/run-once-docker-operations.sh lint-dockerfile
    
[testenv:dockerbuildtest]
description = Run local only dockerfilelint linter
depends = dockerfilelint
whitelist_externals = make
commands =
    make docker-full-structure-testing

[testenv:codesec]
deps = bandit==1.6.1
depends = dockerfilelint
commands =
    bandit -rvc {toxinidir}/bandit.yml {toxinidir}/pyscripts {toxinidir}/docs/source/conf.py -l -ii

[testenv:codelint]
description = Run flake8 and pylint linters
depends = dockerfilelint
commands =
    flake8 --statistics --count --doctests --verbose {toxinidir}/pyscripts/ {toxinidir}/docs/source/
    pylint --disable fixme --rcfile {toxinidir}/pylintrc {toxinidir}/pyscripts/ {toxinidir}/docs/source/conf.py

[testenv:blackbeta]
description = Testing out the new linter called black which is still in beta (accepts failurs temporary)
deps = black==19.3b0
commands = - black --diff --verbose --config {toxinidir}/pyproject.toml {toxinidir}/pyscripts/ {toxinidir}/docs/source/conf.py

[testenv:typing]
description = Run mypy type checking
depends = dockerfilelint
commands =
    mypy --config-file {toxinidir}/mypy.ini {toxinidir}/pyscripts/ {toxinidir}/docs/source/conf.py

[testenv:py37]
description = Run pytest test cases with coverage report
depends =
    codesec
    codelint
    typing
commands =
    pytest -vs --cov --cov-config={toxinidir}/.coveragerc {toxinidir}/pyscripts/test_server.py

[testenv:civalidate]
description = Validate the .circleci/config.yml configuration file with CircleCi cli
depends = py37
commands = /bin/bash {toxinidir}/shellscripts/run-once-docker-operations.sh circleci-validate
