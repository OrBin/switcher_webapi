version: 2.1

orbs:
  docker-publish: circleci/docker-publish@0.1.7

executors:
  python-docker:
    docker:
      - image: "circleci/python:3.7.3-stretch"
    working_directory: ~/workspace
    environment:
      TZ: "Asia/Jerusalem"

  node-docker:
    docker:
      - image: "circleci/node:lts"
    working_directory: ~/workspace

  machine-docker:
    machine:
      image: "circleci/classic:201808-01"
    working_directory: ~/workspace

commands:
  prepare-node:
    description: Prepare node environment
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-node-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
      - run:
          name: Install prettier
          command: npm install prettier@1.18.2
      - save_cache:
          key: v1-switcher-webapi-node-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
          paths:
            - ./node_modules

  prepare-python:
    description: Prepare python's virtual environment
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-python-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
      - run:
          name: Create the venv, install all requirements and save to cache
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -q --progress-bar off -r requirements.txt -c requirements_constraints.txt
            pip install -q --progress-bar off -r requirements_test.txt -c requirements_constraints.txt
      - save_cache:
          key: v1-switcher-webapi-python-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
          paths:
            - ./venv

  prepare-machine:
    description: Prepare the virtual machine
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-machine-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
      - run:
          name: Download docker images and save to cache
          command: |
            filename=docker-cache/saved_images.tar
            if [[ -f "$filename" ]]; then docker load < "$filename"; fi
            mkdir -p docker-cache
            docker pull hadolint/hadolint:v1.16.3
            docker pull koalaman/shellcheck:v0.6.0
            docker save -o "$filename" hadolint/hadolint:v1.16.3 koalaman/shellcheck:v0.6.0

      - save_cache:
          key: v1-switcher-webapi-machine-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum "requirements_test.txt" }}-{{ checksum "requirements_constraints.txt" }}
          paths:
            - docker-cache

  hadolint-docker:
    description: Run one-time-container for passing the Dockerfile through Hadolint
    steps:
      - run:
          name: Run hadolint docker
          command: docker run --rm -i hadolint/hadolint:v1.16.3 < Dockerfile

  run-prettier:
    description: Run prettier linter
    steps:
      - run:
          name: Prettier
          command: node_modules/prettier/bin-prettier.js --config .prettierrc.yml --ignore-path .prettierignore --check *.* **/*.*

  shellcheck-docker:
    description: Run one-time-container for passing the shell scripts through the shellcheck linter
    steps:
      - run:
          name: Run shellcheck docker
          command: docker run --rm -v "$PWD/shellscripts/:/mnt/" koalaman/shellcheck:v0.6.0 $(ls -A1 shellscripts)

  sphinx-build:
    description: Verify build docs with sphinx by building to temp directory
    steps:
      - run:
          name: Sphinx-build
          command: |
            . venv/bin/activate
            mkdir sphinxtemp
            mkdir docs/source/_static
            sphinx-build -W -b html -d sphinxtemp/doctrees docs/source sphinxtemp/html
            rm -r sphinxtemp

  check-security:
    description: Run bandit tests
    steps:
      - run:
          name: Code-security
          command: |
            . venv/bin/activate
            bandit -rvc bandit.yml pyscripts docs/source/conf.py -l -ii

  run-docs-linters:
    description: Pass restructuredText files through doc8 linter.
    steps:
      - run:
          name: Doc8
          command: |
            . venv/bin/activate
            doc8 --config doc8.ini docs/source

  run-code-linters:
    description: Run flake8, pydocstyle and pydocstyle linters
    steps:
      - run:
          name: Linters
          command: |
            . venv/bin/activate
            flake8 --statistics --count --doctests --verbose
            pylint --disable fixme --rcfile pylintrc pyscripts/ docs/source/conf.py

  run-mypy:
    description: Run mypy type checking
    steps:
      - run:
          name: Mypy
          command: |
            . venv/bin/activate
            mypy --config-file mypy.ini pyscripts/ docs/source/conf.py

  run-tests-with-coverage:
    description: Run pytest test cases with coverage report
    steps:
      - run:
          name: Pytest
          command: |
            . venv/bin/activate
            pytest -vs --cov --cov-config=.coveragerc --cov-report=xml:coverage_report/coverage.xml pyscripts/test_server.py
      - persist_to_workspace:
          root: coverage_report/
          paths:
            - coverage.xml
      - store_artifacts:
          path: coverage_report
      - store_test_results:
          path: coverage_report

jobs:
  hadolint-docker-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - hadolint-docker

  prettier-job:
    executor:
      name: node-docker
    steps:
      - checkout
      - prepare-node
      - run-prettier

  docker-check-and-build-job:
    executor:
      name: docker-publish/docker
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - docker-publish/build:
          dockerfile: Dockerfile
          path: .
          image: tomerfi/switcher_webapi
          tag: testing

  sphinx-build-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - sphinx-build

  shellcheck-docker-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - shellcheck-docker

  security-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - check-security

  docs-linters-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-docs-linters

  code-linters-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-code-linters

  pylint-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-pylint

  mypy-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-mypy

  unittests-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-tests-with-coverage

  coverage-reports-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - attach_workspace:
          at: coverage_report/
      - run:
          name: CodeCov
          command: |
            . venv/bin/activate
            codecov --file coverage_report/coverage.xml
            python-codacy-coverage -r coverage_report/coverage.xml

workflows:
  version: "2"

  code-build:
    jobs:
      - prettier-job

      - shellcheck-docker-job

      - hadolint-docker-job:
          requires:
            - prettier-job
            - shellcheck-docker-job

      - docker-check-and-build-job:
          requires:
            - hadolint-docker-job

      - security-job:
          requires:
            - docker-check-and-build-job

      - code-linters-job:
          requires:
            - docker-check-and-build-job

      - mypy-job:
          requires:
            - docker-check-and-build-job

      - unittests-job:
          requires:
            - security-job
            - code-linters-job
            - mypy-job

      - coverage-reports-job:
          requires:
            - unittests-job

  docs-build:
    jobs:
      - docs-linters-job

      - sphinx-build-job:
          requires:
            - docs-linters-job
