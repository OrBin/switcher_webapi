# yamllint disable rule:line-length

version: 2.1

#####################
####### Orbs ########
#####################
orbs:
  # Currently, docker orb is used to build the docker image and not publish it,
  # Therefore the user and password environment variables does not need to be set.
  docker-orb: circleci/docker@0.5.1

#####################
##### Executors #####
#####################
executors:
  # Used for running one-time docker images.
  # Currnet image (201808-01) runs docker 18.06.0-ce and docker-compose 1.22.0.
  # https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
  machine-docker:
    machine:
      image: "circleci/classic:201808-01"
    working_directory: ~/workspace

  # Used for executing npm modules.
  node-docker:
    docker:
      - image: "circleci/node:lts"
    working_directory: ~/workspace

  # Used for starting python programs.
  python-docker:
    docker:
      - image: "circleci/python:3.7.3-stretch"
    working_directory: ~/workspace
    environment:
      TZ: "Asia/Jerusalem"

#####################
##### Commands ######
#####################
commands:
  ##################################################################
  ### Commands for creating environments and save/restore caches ###
  ##################################################################

  # Docker images are pulled here and saved to cache.
  # Various tools can be saved to cache here.
  # Use with the machine-docker executer as preparation before running one-time docker containers.
  prepare-machine:
    description: Prepare the virtual machine
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-machine-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum ".dockerignore" }}
      - run:
          name: Install container-structure-test
          command: |
            if [[ ! -f "./google-container-tools/container-structure-test" ]]
            then
              mkdir -p ./google-container-tools
              curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
              chmod +x container-structure-test-linux-amd64
              mv container-structure-test-linux-amd64 ./google-container-tools/container-structure-test
            fi
      - run:
          name: Download docker images and save to cache
          command: |
            filename=docker-cache/saved_images.tar
            if [[ -f "$filename" ]]; then docker load < "$filename"; fi
            mkdir -p docker-cache
            docker pull hadolint/hadolint:v1.16.3
            docker pull koalaman/shellcheck:v0.6.0
            docker pull circleci/circleci-cli:alpine
            docker pull jdkato/vale:latest
            docker save -o "$filename" jdkato/vale:latest circleci/circleci-cli:alpine hadolint/hadolint:v1.16.3 koalaman/shellcheck:v0.6.0

      - save_cache:
          key: v1-switcher-webapi-machine-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum ".dockerignore" }}
          paths:
            - docker-cache
            - ./google-container-tools

  # Node packages are installed here and then saved to cache.
  # Use with the node-docker executer as preparation before executing npm modules.
  prepare-node:
    description: Prepare node environment
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-node-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install prettier
          command: npm install
      - save_cache:
          key: v1-switcher-webapi-node-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules

  # Pypi packages are installed here into a venv that is saved to cache.
  # Use with the python-docker executer as preparaton before starting python programs.
  prepare-python:
    description: Prepare python's virtual environment
    steps:
      - restore_cache:
          keys:
            - v1-switcher-webapi-python-{{ .Branch }}-{{ checksum "requirements_prod.txt" }}-{{ checksum "requirements_test.txt" }}
      - run:
          name: Create the venv, install all requirements and save to cache
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -q --progress-bar off -r requirements_prod.txt -c requirements.txt
            pip install -q --progress-bar off -r requirements_test.txt -c requirements.txt
            pip install -q --progress-bar off -r requirements_docs.txt -c requirements.txt
      - save_cache:
          key: v1-switcher-webapi-python-{{ .Branch }}-{{ checksum "requirements_prod.txt" }}-{{ checksum "requirements_test.txt" }}
          paths:
            - ./venv

  ######################################################################################################
  ### Commands running inside the machine-docker executer after running  the prepare-machine command ###
  ######################################################################################################
  dockerfile-lint:
    description: Run one-time container for hadolint linter against Dockerfile
    steps:
      - run:
          name: Run hadolint docker
          command: bash shellscripts/run-once-docker-operations.sh lint-dockerfile

  shellscripts-check:
    description: Run one-time container for shellcheck linter against shellscripts/*.sh
    steps:
      - run:
          name: Run shellcheck docker
          command: bash shellscripts/run-once-docker-operations.sh check-shellscripts

  run-container-structure-test:
    description: Run the GoogleContainerTools/container-structure-test tool
    steps:
      - run:
          name: Run container-structure-test
          command: ./google-container-tools/container-structure-test test --force --config container_structure.yml --verbosity debug --image tomerfi/switcher_webapi:testing

  docs-spell:
    description: Run one-time container for vale linter against docs/source/ rst files
    steps:
      - run:
          name: Run vale docker
          command: bash shellscripts/run-once-docker-operations.sh vale-rstdocs

  ######################################################################################################
  ###### Commands running inside the node-docker executer after running the prepare-node command #######
  ######################################################################################################
  pkg-validate:
    description: Run npm's package-json-validate for validating the package.json file
    steps:
      - run:
          name: Pjv - package.json
          command: npm run validate-pkg

  md-lint:
    description: Run npm's remark and remark-lint plugins against md files
    steps:
      - run:
          name: Remark - md lint
          command: npm run lint-md

  md-spell:
    description: Run npm's markdown-spellcheck against md files
    steps:
      - run:
          name: Markdown Spellcheck
          command: npm run spell-md-report

  yml-lint:
    description: Run npm's prettier module against yml files
    steps:
      - run:
          name: Prettier - yml lint
          command: npm run lint-yml

  ######################################################################################################
  #### Commands running inside the python-docker executer after running the prepare-python command #####
  ######################################################################################################
  docs-lint:
    description: Run python doc8 linter against docs/source/*.rst
    steps:
      - run:
          name: Doc8
          command: |
            . venv/bin/activate
            doc8 --config doc8.ini docs/source

  sphinx-build:
    description: Verify build docs with python sphinx by building into temp directory
    steps:
      - run:
          name: Sphinx-build
          command: |
            . venv/bin/activate
            mkdir sphinxtemp
            sphinx-build -W -b html -d sphinxtemp/doctrees docs/source sphinxtemp/html
            rm -r sphinxtemp

  check-security:
    description: Run python bandit against py files
    steps:
      - run:
          name: Code-security
          command: |
            . venv/bin/activate
            bandit -rvc bandit.yml pyscripts docs/source/conf.py -l -ii

  run-code-lint:
    description: Run python flake8 and pylint againt py files
    steps:
      - run:
          name: Linters
          command: |
            . venv/bin/activate
            flake8 --statistics --count --doctests --verbose pyscripts/ docs/source/
            pylint --disable fixme --rcfile pylintrc pyscripts/ docs/source/conf.py

  run-mypy:
    description: Run mypy type-checking againt py files
    steps:
      - run:
          name: Mypy
          command: |
            . venv/bin/activate
            mypy --config-file mypy.ini pyscripts/ docs/source/conf.py

  run-tests-with-coverage:
    description: Run pytest test cases with coverage report against py files
    steps:
      - run:
          name: Pytest
          command: |
            . venv/bin/activate
            pytest -vs --cov --cov-config=.coveragerc --cov-report=xml:coverage_report/coverage.xml pyscripts/test_server.py
      - persist_to_workspace:
          root: coverage_report/
          paths:
            - coverage.xml
      - store_artifacts:
          path: coverage_report
      - store_test_results:
          path: coverage_report

#####################
####### Jobs ########
#####################
jobs:
  #############################################
  ### Jobs for the docs-lint-build workflow ###
  #############################################
  md-lint-job:
    executor:
      name: node-docker
    steps:
      - checkout
      - prepare-node
      - md-lint

  md-spell-job:
    executor:
      name: node-docker
    steps:
      - checkout
      - prepare-node
      - md-spell

  docs-linters-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - docs-lint

  docs-spell-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - docs-spell

  sphinx-build-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - sphinx-build

  ###############################################
  ### Jobs for the docker-build-test workflow ###
  ###############################################
  dockerfile-lint-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - dockerfile-lint

  docker-build-test-structure-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - docker-orb/build:
          dockerfile: Dockerfile
          path: .
          image: tomerfi/switcher_webapi
          tag: testing
          extra_build_args: '--build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --build-arg VCS_REF=testref --build-arg VERSION=testing'
      - run-container-structure-test

  #############################################
  ### Jobs for the code-lint-test workflow ####
  #############################################
  pkg-validate-job:
    executor:
      name: node-docker
    steps:
      - checkout
      - prepare-node
      - pkg-validate

  yml-lint-job:
    executor:
      name: node-docker
    steps:
      - checkout
      - prepare-node
      - yml-lint

  shellscripts-check-job:
    executor:
      name: machine-docker
    steps:
      - checkout
      - prepare-machine
      - shellscripts-check

  security-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - check-security

  code-lint-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-code-lint

  mypy-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-mypy

  unittests-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - run-tests-with-coverage

  coverage-reports-job:
    executor:
      name: python-docker
    steps:
      - checkout
      - prepare-python
      - attach_workspace:
          at: coverage_report/
      - run:
          name: CodeCov
          command: |
            . venv/bin/activate
            codecov --file coverage_report/coverage.xml
            python-codacy-coverage -r coverage_report/coverage.xml

#####################
##### Workslows #####
#####################
workflows:
  version: "2"

  # Lint and build the documantation site files
  docs-lint-build:
    jobs:
      - md-lint-job

      - md-spell-job:
          requires:
            - md-lint-job

      - docs-spell-job:
          requires:
            - md-lint-job
            - md-spell-job

      - docs-linters-job:
          requires:
            - docs-spell-job

      - sphinx-build-job:
          requires:
            - docs-spell-job
            - docs-linters-job

  # Build and test the docker images
  docker-build-test:
    jobs:
      - dockerfile-lint-job

      - docker-build-test-structure-job:
          requires:
            - dockerfile-lint-job

  # Lint and the test the code and scripts
  code-lint-test:
    jobs:
      - pkg-validate-job

      - yml-lint-job

      - shellscripts-check-job

      - security-job:
          requires:
            - pkg-validate-job
            - yml-lint-job
            - shellscripts-check-job

      - code-lint-job:
          requires:
            - yml-lint-job
            - shellscripts-check-job

      - mypy-job:
          requires:
            - yml-lint-job
            - shellscripts-check-job

      - unittests-job:
          requires:
            - security-job
            - code-lint-job
            - mypy-job

      - coverage-reports-job:
          requires:
            - unittests-job
